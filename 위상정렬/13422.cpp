#include <iostream>  // 입출력을 위한 헤더 
#include <vector>    // 벡터 자료구조 사용을 위한 헤더

using namespace std; 

int steal(int n, int m, int k, vector<int>& house) {   // 도둑질 가능한 가짓 수를 계산하는 함수
    //윈도우 초기화
    int money = 0;  // 훔친 돈의 금액을 저장하는 변수
    for (int i = 0; i < m; i++) {   // 연속된 m개의 훔칠 집에 대해 반복문 실행
        money += house[i];  // 각 집의 전체 보유 돈을 더하여 훔친 총액 계산
    }
    int ans = money < k; //훔쳐야 하는 집 초기화 (방법장치가 실행되지 않는 선에서)

    if (n == m) { //훔칠 수 있는 경우 딱 1개인 경우
        return ans;  // money가 k보다 작을 경우 true 대신 1로 저장되어 가짓수 1가지 리턴
    }
    for (int i = m; i < n + m - 1; i++) {   // 슬라이딩 윈도우를 한칸씩 이동하는 반복문
        money -= house[i - m];  // 슬라이딩 윈도우에서 벗어난 집의 금액 빼기
        money += house[i % n];  // 슬라이딩 윈도우에서 추가된 집의 금액 추가하기
        if (money < k) {        // 방범장치가 실행되지 않을 경우에만
            ans++;              // 훔칠 수 있는 경우의 수 1 추가
        }
    }
    return ans;                 // 최종 경우의 수 반환
}

/**
 * [도둑]
 *
 * 1. 연속해서 훔쳐야 할 집이 m으로 고정됐기 때문에 슬라이딩 윈도우
 * 2. 직선이 아니라 원 형태의 배열! 모듈러 연산을 통해 윈도우의 양 끝 위치 조절하기
 * !주의! 마을에 있는 집의 개수와 도둑이 훔칠 집의 개수가 같을 때(n==m) 도둑이 훔칠 수 있는 경우의 수 1개!
 *    => 예를 들어, n = m = 3, k = 4, house = [1, 1, 1] 일 때, 실제 방법의 수는 1번, 2번, 3번 집을 택하는 경우밖에 없지만
 *       예외 처리를 안해줄 경우, 원형으로 돌며 3을 출력하게 됨!
 */

int main() {    // 가장 먼저 실행되는 main 함수
    int t, n, m, k; // t:테스트케이스 수, n: 집 수, m:훔칠 연속 집 수, k: 방법장치 작동선 

    cin >> t;   // 테스트케이스 수 입력받기
    while (t--) {  // 테스트케이스 수 만큼 반복
        //입력
        cin >> n >> m >> k;    // 전체 집수, 훔칠 집수, 방법장치 작동 선 입력받기   
        vector<int> house(n, 0);  // n개의 각 집의 돈의 양을 저장할 벡터 선언
        for (int i = 0; i < n; i++) {  // n개의 각 집에 대해 반복문 실행
            cin >> house[i];      // 각 집의 보유 돈을 입력받아 벡터에 저장
        }

        //연산 & 출력
        cout << steal(n, m, k, house) << '\n';  // 각 테스트 케이스마다의 가능 가짓수 출력
    }
    return 0;   // 메인 함수 종료
}